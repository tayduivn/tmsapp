apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.tgdd.mwgpay"
        minSdkVersion rootProject.ext.minSdkVersion
        missingDimensionStrategy 'react-native-camera', 'general'
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        ndk {
            abiFilters "armeabi-v7a", "x86","arm64-v8a", "x86_64"
        }
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

preBuild.doLast {
    ant.replaceregexp(match:'import android.support.annotation.', replace:'import androidx.annotation.', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'@android.support.annotation.', replace:'@androidx.annotation.', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'import android.support.v4.content.', replace:'import androidx.core.content.', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'import android.support.media.', replace:'import androidx.exifinterface.media.', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'import android.support.v8.renderscript.', replace:'import androidx.renderscript.', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'import android.support.v4.os.', replace:'import androidx.core.os.', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'import android.support.v4.view.', replace:'import androidx.core.view.', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'import android.support.v4.util.Pools', replace:'import androidx.core.util.Pools', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'import android.support.v4.util.', replace:'import androidx.collection.', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'import android.support.multidex.', replace:'import androidx.multidex.', flags:'g', byline:true) {
        fileset(dir: './src/main/', includes: '**/*.java')
    }

    ant.replaceregexp(match:'import androidx.core.content.LocalBroadcastManager', replace:'import androidx.localbroadcastmanager.content.LocalBroadcastManager', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'android.support.v4.content.FileProvider', replace:'androidx.core.content.FileProvider', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }
    ant.replaceregexp(match:'import android.support.v7.app.AlertDialog', replace:'import androidx.appcompat.app.AlertDialog', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }

    ant.replaceregexp(match:'import android.support.v7.app.AlertDialog', replace:'import androidx.appcompat.app.AlertDialog', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }

    ant.replaceregexp(match:'import android.support.v4.app.ActivityCompat', replace:'import androidx.core.app.ActivityCompat', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }

    ant.replaceregexp(match:'import android.support.v4.app', replace:'import androidx.core.app', flags:'g', byline:true) {
        fileset(dir: '../../node_modules/', includes: '**/*.java')
    }

}

dependencies {
    implementation project(':@react-native-community_netinfo')
    implementation project(':react-native-device-info')
    implementation project(':react-native-screens')
    implementation project(':react-native-image-resizer')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-image-base64')
    implementation project(':react-native-exit-app')
    implementation project(':jail-monkey')
    implementation project(':lottie-react-native')
    implementation project(':react-native-permissions')
    implementation project(':react-native-restart')
    implementation project(':react-native-exception-handler')
    implementation project(':react-native-firebase')
    implementation project(':react-native-date-picker')
    implementation project(':react-native-keychain')
    implementation project(':react-native-touch-id')
    implementation project(':react-native-camera')
    implementation project(':react-native-contacts')
    implementation project(':@react-native-community_async-storage')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-gesture-handler')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation "androidx.multidex:multidex:2.0.0"
    // Firebase dependencies
    implementation "com.google.android.gms:play-services-base:16.1.0"
    implementation "com.google.firebase:firebase-core:16.0.9"
    implementation "com.google.firebase:firebase-messaging:18.0.0"
    implementation 'me.leolin:ShortcutBadger:1.1.21@aar'

    // implementation "com.google.android.gms:play-services-base:17.0.0"
    // implementation "com.google.firebase:firebase-core:17.0.1"
    // implementation "com.google.firebase:firebase-messaging:19.0.0"
	
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}


// ADD THIS AT THE BOTTOM
// apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true
apply plugin: 'com.google.gms.google-services'
